#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define QUICK_TAP_MS 200
#define REQUIRE_PRIOR_IDLE_MS 175
#define TAPPING_TERM_MS 280

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&mt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/ {
    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        lshift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <15 16>;
            layers = <0 2 1>;
        };

        rshift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <19 20>;
            layers = <0 1 2>;
        };

        lctrl {
            bindings = <&kp LCTRL>;
            key-positions = <13 14>;
            layers = <0 1 2>;
        };

        rctrl {
            bindings = <&kp RCTRL>;
            key-positions = <21 22>;
            layers = <0 1 2>;
        };

        lalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <27 28>;
            layers = <0 1 2>;
        };

        ralt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <32 31>;
            layers = <0 1 2>;
        };

        lwin {
            bindings = <&kp LEFT_WIN>;
            key-positions = <25 26>;
            layers = <0 1 2>;
        };

        rwin {
            bindings = <&kp RIGHT_WIN>;
            key-positions = <33 34>;
            layers = <0 1 2>;
        };

        lctrl+shift {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <15 14>;
            layers = <0 2 1>;
        };

        rctrl+shift {
            bindings = <&kp RC(RIGHT_SHIFT)>;
            key-positions = <20 21>;
            layers = <0 2 1>;
        };

        lctrl+alt {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <14 27>;
            layers = <0 2 1>;
        };

        rctrl+alt {
            bindings = <&kp RC(RIGHT_ALT)>;
            key-positions = <32 21>;
            layers = <0 2 1>;
        };

        lshift+alt {
            bindings = <&kp LS(LEFT_ALT)>;
            key-positions = <15 28>;
            layers = <0 2 1>;
        };

        rshift+alt {
            bindings = <&kp RS(RIGHT_ALT)>;
            key-positions = <31 20>;
            layers = <0 2 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "MAIN";
            bindings = <
&none      &none  &kp W  &kp E               &kp R         &kp T      &kp Y          &kp U        &kp I                &kp O    &none          &none
&kp Q      &kp A  &kp S  &kp D               &kp F         &kp G      &kp H          &kp J        &kp K                &kp L    &kp P          &kp SQT
&kp GRAVE  &kp Z  &kp X  &kp C               &kp V         &kp B      &kp N          &kp M        &kp COMMA            &kp DOT  &kp SEMICOLON  &kp SLASH
                         &mt LEFT_SHIFT TAB  &lt 2 ESCAPE  &kp SPACE  &kp BACKSPACE  &lt 1 ENTER  &mt RIGHT_SHIFT DEL
            >;
        };

        lower_layer {
            display-name = "ARR";
            bindings = <
&none  &none  &kp F1  &kp F2        &kp F3   &kp F4     &kp PAGE_UP    &kp HOME   &kp UP      &kp END      &sys_reset       &bootloader
&none  &none  &kp F5  &kp F6        &kp F7   &kp F8     &kp PAGE_DOWN  &kp LEFT   &kp DOWN    &kp RIGHT    &kp PRINTSCREEN  &none
&none  &none  &kp F9  &kp F10       &kp F11  &kp F12    &kp INSERT     &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp DELETE       &none
                      &kp LEFT_ALT  &trans   &kp LCTRL  &none          &trans     &none
            >;
        };

        raise_layer {
            display-name = "NUM";
            bindings = <
&bootloader  &sys_reset  &kp EXCLAMATION  &kp AT_SIGN     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp MINUS      &kp N7        &kp N8         &kp N9        &to 4         &none
&kp EQUAL    &kp HASH    &kp DOLLAR       &kp PERCENT     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PLUS       &kp NUMBER_4  &kp N5         &kp NUMBER_6  &kp ASTERISK  &kp BACKSLASH
&kp CARET    &kp PIPE    &kp AMPERSAND    &kp UNDERSCORE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp N0         &kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3  &kp EQUAL     &kp SLASH
                                          &none           &trans                &none                  &kp RIGHT_WIN  &trans        &kp RIGHT_ALT
            >;
        };

        adjust_layer {
            display-name = "ADJ";
            bindings = <
&bootloader  &studio_unlock  &none         &none         &none         &none         &none         &none         &none         &none         &studio_unlock  &bootloader
&bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &bt BT_CLR
&sys_reset   &none           &none         &none         &none         &none         &none         &none         &none         &none         &none           &sys_reset
                                           &none         &trans        &none         &none         &trans        &none
            >;
        };

        game {
            bindings = <
&kp GRAVE       &kp Q  &kp W  &kp E    &kp R        &kp T      &none  &none  &none  &none  &none  &to 0
&kp LEFT_SHIFT  &kp A  &kp S  &kp D    &kp F        &kp G      &none  &none  &none  &none  &none  &none
&kp LCTRL       &kp Z  &kp X  &kp C    &kp V        &kp B      &none  &none  &none  &none  &none  &none
                              &kp TAB  &lt 5 SPACE  &kp SPACE  &none  &none  &none
            >;
        };

        game_nums {
            bindings = <
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &none  &none  &none  &none  &none  &to 0
&none  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &none  &none  &none  &none  &none  &none
&none  &none         &none         &none         &none         &none         &none  &none  &none  &none  &none  &none
                                   &none         &trans        &none         &none  &none  &none
            >;
        };
    };
};
